---
- hosts: all
  connection: local

  vars:
  
#Homebrew Applications
    applications:
      - docker
      - dropbox
      - evernote
      - fing # network diagnostics
      - iterm2
      - little-snitch # awesome outbound firewall
      - slack
      - vagrant # | https://www.vagrantup.com/downloads.html
      - vagrant-manager #
      #- virtualbox # | https://www.virtualbox.org/
      #- virtualbox-extension-pack

    brew_taps:
      - "homebrew/core"
      - "caskroom/cask"
      - "caskroom/drivers"
      - "caskroom/versions"
      - "buo/cask-upgrade"

    #dotfile_repo_username: glennr # the GH repo where your dotfiles are

    brew_utils:
      #- ansible #already installed by ./mac bootstrap script
      #- autoconf
      #- autojump # quickly navigate from cmd line
      #- bash # Bash 4
      #- boot2docker # for running docker on osx
      #- bfg # requires java
      #- brew-cask
      #- cowsay # amazing
      #- coreutils # Install GNU core utilities (those that come with OS X are outdated)
      #- ctags
      #- docker # | https://docs.docker.com/installation/mac/
      #- dockutil
      #- ffmpeg
      #- findutils  # Install GNU `find`, `locate`, `updatedb`, and `xargs`, g-prefixed
      #- gandi.cli
      #- git-lfs
      #- go
      #- gpg
      #- homebrew/dupes/grep # more recent version of OS X grep # ansible bug: https://github.com/ansible/ansible-modules-extras/issues/252
      #- hub # github
      #- imagemagick # IDK why, but I always end up needing this beast
      #- keybase # in alpha at time of writing.
      #- mas
      #- mongodb # a shittier PG
      #- mtr # better traceroute
      #- mysql # required PHP library
      #- nmap
      #- node
      #- npm
      #- openssl # for easyrsa
      #- packer
      # - phantomjs
      #- postgresql # yes and nosql
      #- pwgen # password generator
      #- python
      #- rbenv # ruby. Just installs binaries - assumes you bring in the dotfiles.
      #- readline
      #- redis
      #- rename # rename multiple files
      #- rsync
      #- ruby-build
      #- sqlite # production rails DB
      #- sshpass
      #- the_silver_searcher # fast ack-grep
      #- tmux
      #- vim
      #- wget
      #- zsh


    dockitems_to_remove:
      - Reminders
      - Maps
      - Photos
      - FaceTime
      - iBooks
      - iTunes
      - Siri

    dockitems_to_persist:
      - name: App Store
        path: "/Applications/App Store.app"
        pos: 1
      - name: Launchpad
        path: ""
        pos: 2
      - name: Google Chrome
        path: "/Applications/Google Chrome.app"
        pos: 3
      - name: Evernote
        path: "/Applications/Evernote.app"
        pos: 4
      - name: iTerm
        path: /Applications/iTerm.app
        pos: 5

    home: "{{ lookup('env','HOME') }}"

  tasks:

    - name: Check Homebrew is installed
      stat: path=/usr/local/bin/brew
      register: brew_installed

    - name: Install Homebrew
      shell: ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
      when: brew_installed.stat.exists == false

    - name: Install required Homebrew Taps
      shell: brew tap {{ item }}
      with_items: "{{ brew_taps }}"

    ### UTILS

    - name: Install libraries/utils with homebrew
      homebrew: name={{ item }} state=present
      with_items: "{{ brew_utils }}"

    - name: Cleanup after brewing
      shell: brew cleanup

    ### APPS

    - name: Check for installed apps(casks)
      shell: brew cask list | grep {{ item }}
      register: installed_applications
      with_items: "{{ applications }}"
      ignore_errors: true

    - name: Install Apps with brew-cask
      shell: brew cask install {{ item }}
      with_items: "{{ applications }}"
      when: item not in installed_applications.results | map(attribute='stdout')
      #when: "{{ item not in installed_applications.results|map(attribute='stdout') }}"


    ### Dockutil fixing

    - name: Remove all crap from Dock
      shell: dockutil --remove '{{ item }}'
      ignore_errors: true
      with_items: "{{ dockitems_to_remove }}"

    - name: Check if items in dock exist
      shell: dockutil --find '{{ item.name }}' || dockutil --add '{{ item.path }}'
      with_items: "{{ dockitems_to_persist }}"

    - name: Fix order
      shell: dockutil --move '{{ item.name }}' --position {{ item.pos }}
      with_items: "{{ dockitems_to_persist }}"


    ### OSX SETTINGS

    - name: Configure System Settings
      script: scripts/system_settings.sh
      become: true


    ### DOTFILES

#    - name: Check rcm is installed
#      stat: path=/usr/local/bin/rcup
#      register: rcm_installed
#
#    - name: Install rcm for dotfiles management
#      shell: brew tap thoughtbot/formulae && brew install rcm
#      when: rcm_installed.stat.exists == false
#
#    - name: Check ~/src dir exists
#      stat: path=~/src/
#      register: src_dir_exists
#
#    - name: Assures ~/src dir exists
#      file: path=~/src state=directory
#
#    - name: Assures ~/src/thoughtbot dir exists
#      file: path=~/src/thoughtbot state=directory
#
#    - name: Install thoughtbot/dotfiles
#      git: repo=https://github.com/thoughtbot/dotfiles.git dest=~/src/thoughtbot/dotfiles
#
#    - name: Link ~/dotfiles to ~/src/thoughtbot/dotfiles
#      file: dest=~/dotfiles
#            src=~/src/thoughtbot/dotfiles
#            state=link
#            force=yes
#
#    - name: Assures ~/src/{{ dotfile_repo_username }} dir exists
#      file: path=~/src/{{ dotfile_repo_username }} state=directory
#
#    - name: Install {{ dotfile_repo_username }}/dotfiles
#      git: repo=https://github.com/{{ dotfile_repo_username }}/dotfiles.git dest=~/src/{{ dotfile_repo_username }}/dotfiles
#
#    - name: Link ~/dotfiles-local to ~/src/{{ dotfile_repo_username }}/dotfiles
#      file: dest=~/dotfiles-local
#            src=~/src/{{ dotfile_repo_username }}/dotfiles
#            state=link
#            force=yes
#
#    - name: Generate dotfiles with rcup
#      shell: env RCRC=~/dotfiles/rcrc rcup


    ## POST INSTALL STEPS / Cask gotchas
    #
    # require manual intervention!
    #

#    - name: Run Little Snitch Installer
#      shell: open /opt/homebrew-cask/Caskroom/little-snitch/3.5.3/Little\ Snitch\ Installer.app
#      when: "'little-snitch' in applications"
#
#    - name: Run Monolingual
#      shell: open ~/Applications/Monolingual.app
#      when: "'monolingual' in applications"
